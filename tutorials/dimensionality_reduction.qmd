---
title: "Dimensionality Reduction"
format:
  html:
    toc: false
    include-in-header:
      - text: |
          <style>
            .quarto-title-block {
              display: none !important;
            }
          </style>
    embed-resources: true
---

## Dimensions as a matrix

Consider a measurement of two proteins density in a couple of cells

|          | Cell 1 | Cell 2 | Cell 3 |
|----------|--------|--------|--------|
| Protein 1 | 1.2    | 3.1    | 0.5    |
| Protein 2 | 2.8    | 0.9    | 3.5    |

_One way_ to represent this is on a plot of protein 1 vs protein 2, and Cells 1, 2, 3 being dots on that plot.

```{julia}
#| label: fig-protein-plot-2d
#| fig-cap: "Protein 1 vs Protein 2 Density"
using GLMakie
protein1 = [1.2, 3.1, 0.5]
protein2 = [2.8, 0.9, 3.5]
cell_labels = ["Cell 1", "Cell 2", "Cell 3"]

fig = Figure(size = (600, 400))
ax = Axis(fig[1, 1],
          xlabel="Protein 1 Density",
          ylabel="Protein 2 Density")

scatter!(ax, protein1, protein2, markersize = 10)
text!(ax, protein1, protein2, text = cell_labels, align = (:left, :bottom), offset = (5, 5), fontsize=12)

fig
```

If we have lots of cells, we can see that some cells have more similar number of proteins, than other cells. And we can categorize those cells in certain populations, give them names, and think about them via those categories. Humans love to categorize stuff and then argue about the categories. 

```{julia}
#| label: fig-cell-populations-glmakie
#| fig-cap: "Cell Populations based on Protein Density (GLMakie)"
using GLMakie
using Random

n_points_per_cluster = 50

# Cluster 1: "Red Team"
cluster1_x = randn(n_points_per_cluster) .+ 2.5
cluster1_y = randn(n_points_per_cluster) .+ 2.5

# Cluster 2: "Blue Team"
cluster2_x = randn(n_points_per_cluster) .- 2.5
cluster2_y = randn(n_points_per_cluster) .- 2.5

fig = Figure(size = (700, 500))
ax = Axis(fig[1, 1],
          xlabel="Protein X Density",
          ylabel="Protein Y Density",
          title="Cell Populations")
scatter!(ax, cluster1_x, cluster1_y, color = (:red, 0.7), label = "Red Team", markersize=5)
scatter!(ax, cluster2_x, cluster2_y, color = (:blue, 0.7), label = "Blue Team", markersize=5)
axislegend(ax, position = :rt) # position: :rt (right top), :ct (center top), etc.

fig
```

More cells, mean more points. But another protein, is a whole new dimension. 

```{=html}
<html>
<div id="plotContainer" style="width:500px; height:400px;"></div>
<div>
  <label for="numPointsSlider">Number of Cells (N): </label>
  <input type="range" id="numPointsSlider" min="3" max="20" value="10">
  <span id="numPointsValue">10</span>
</div>

<script src="https://cdn.plot.ly/plotly-2.24.1.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const slider = document.getElementById('numPointsSlider');
    const numPointsValueDisplay = document.getElementById('numPointsValue');
    const plotDiv = 'plotContainer';

    function generateData(numPoints) {
        const data = {
            x_protein1: [],
            y_protein2: [],
            z_protein3: [],
            text: [] // For cell labels
        };
        for (let i = 0; i < numPoints; i++) {
            data.x_protein1.push(Math.random() * 10); // Random value for Protein 1
            data.y_protein2.push(Math.random() * 10); // Random value for Protein 2
            data.z_protein3.push(Math.random() * 10); // Random value for Protein 3
            data.text.push(`Cell ${i+1}`);
        }
        return data;
    }

    function updatePlot(numPoints) {
        const traces = [];
        // For this example, we'll imagine two clusters even in 3D
        // Cluster 1
        const cluster1_x = Array.from({length: numPoints}, () => Math.random() * 5 + 5); // Values 5-10
        const cluster1_y = Array.from({length: numPoints}, () => Math.random() * 5 + 5);
        const cluster1_z = Array.from({length: numPoints}, () => Math.random() * 5 + 5);
        const cluster1_text = Array.from({length: numPoints}, (_, i) => `Cell C1-${i+1}`);

        traces.push({
            x: cluster1_x,
            y: cluster1_y,
            z: cluster1_z,
            mode: 'markers',
            type: 'scatter3d',
            name: 'Cluster A',
            text: cluster1_text,
            marker: { size: 5, color: 'blue' }
        });

        // Cluster 2
        const cluster2_x = Array.from({length: numPoints}, () => Math.random() * 5); // Values 0-5
        const cluster2_y = Array.from({length: numPoints}, () => Math.random() * 5);
        const cluster2_z = Array.from({length: numPoints}, () => Math.random() * 5);
        const cluster2_text = Array.from({length: numPoints}, (_, i) => `Cell C2-${i+1}`);

        traces.push({
            x: cluster2_x,
            y: cluster2_y,
            z: cluster2_z,
            mode: 'markers',
            type: 'scatter3d',
            name: 'Cluster B',
            text: cluster2_text,
            marker: { size: 5, color: 'red' }
        });


        const layout = {
            title: '3D Protein Expression',
            scene: {
                xaxis: { title: 'Protein 1 Density' },
                yaxis: { title: 'Protein 2 Density' },
                zaxis: { title: 'Protein 3 Density' }
            },
            margin: { l: 0, r: 0, b: 0, t: 40 } // Adjust margins to fit title
        };

        Plotly.newPlot(plotDiv, traces, layout);
    }

    slider.addEventListener('input', function() {
        const numPoints = parseInt(this.value);
        numPointsValueDisplay.textContent = numPoints;
        updatePlot(numPoints); // Re-generate and plot data for all traces
    });

    // Initial plot
    updatePlot(parseInt(slider.value));
});
</script>
</html>
```

So a matrix $M_{ij}$ can be thought of as $i$ dimensions with $j$ data points. There are other ways to think about this. A higher rank tensor $M_ijk$ is a whole different thing, and takes a lot more work to think about.

A common thing a biologist wants to do is look at millions of cells, across all the genes. There are ~20,000 genes in the human genome, so that is a 20,000 dimensional space. There is no good way to plot that. So we want to bring the number of dimensions down.

## Principal Component Analysis


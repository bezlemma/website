[
  {
    "objectID": "tutorials/install_julia.html",
    "href": "tutorials/install_julia.html",
    "title": "Julia Quick Start",
    "section": "",
    "text": "Download Julia here: https://julialang.org/downloads/\nOpen the Julia application. You should see a startup banner similar to this:\nTry typing in 2+2 and hitting enter. If you know LaTeX, Julia is happy to think about LaTeX commands, so try typing in whcih turns into π and hitting enter",
    "crumbs": [
      "Tutorials",
      "Julia Quick Start"
    ]
  },
  {
    "objectID": "tutorials/install_julia.html#install-visual-studio-code-vs-code",
    "href": "tutorials/install_julia.html#install-visual-studio-code-vs-code",
    "title": "Julia Quick Start",
    "section": "Install Visual Studio Code (VS Code)",
    "text": "Install Visual Studio Code (VS Code)\nAfter confirming Julia runs, download and install VS Code: https://code.visualstudio.com/\n\nOpen VS Code.\nClick on the Extensions icon in the Activity Bar on the side of the window. It looks like four squares forming a larger square, with the top-right square slightly detached.\nSearch for “Julia” in the search bar.\nFind the extension named Julia published by julialang and click Install.",
    "crumbs": [
      "Tutorials",
      "Julia Quick Start"
    ]
  },
  {
    "objectID": "tutorials/install_julia.html#create-and-run-your-first-julia-file",
    "href": "tutorials/install_julia.html#create-and-run-your-first-julia-file",
    "title": "Julia Quick Start",
    "section": "Create and Run Your First Julia File",
    "text": "Create and Run Your First Julia File\n\nCreate a new file named HelloJulia.jl.\nOpen this file in VS Code.\nPaste the following code into the file:\n\nprintln(\"The first digits of pi are: \", pi)\n\nRun the code by clicking the Run button (a trinagluar play icon) in the top-right corner of the editor.",
    "crumbs": [
      "Tutorials",
      "Julia Quick Start"
    ]
  },
  {
    "objectID": "tutorials/install_julia.html#graph-some-data",
    "href": "tutorials/install_julia.html#graph-some-data",
    "title": "Julia Quick Start",
    "section": "Graph some data",
    "text": "Graph some data\nNow you can modify your HelloJulia.jl script (or create a new one) to use these packages. Here’s an example that creates a simple plot using Makie and saves it as a PDF:\n\nusing GLMakie, DataFrames #using GLMakie, CairoMakie, \n\n# Activate CairoMakie for saving vector graphics like PDF\nGLMakie.activate!() #CairoMakie.activate!()\n\n# Create some sample data\nx = 0:0.1:2pi\ny_sin = sin.(x)\ny_cos = cos.(x)\n\n# Create a DataFrame (optional, but useful to show now rather that later)\ndf = DataFrame(X=x, SinY=y_sin, CosY=y_cos)\n\n# Create the plot figure and axis\nfig1 = Figure(size = (400, 400))\nax = Axis(fig1[1, 1], xlabel = \"X [um]\", ylabel = \"Y [Pa]\",\n          title = \"Sine and Cosine Waves\")\n\n# Plot the lines\nlines!(ax, df.X, df.SinY, label = \"sin(x)\", color = :blue, linewidth = 2)\nlines!(ax, df.X, df.CosY, label = \"cos(x)\", color = :red, linewidth = 2)\n\naxislegend(ax) # Add a legend\n\n# Show the plot in an interactive window (uses GLMakie backend)\n# GLMakie.activate!() # GLMakie is often the default interactive backend\n#display(fig) # Or just `fig` as the last line in a Quarto cell\n\n# Save the plot as a PDF (uses CairoMakie backend)\n# Ensure CairoMakie is active if you uncomment this\n# CairoMakie.activate!()\n# save(\"plot.pdf\", fig) # This would save to the current directory (tutorials/)\nfig1",
    "crumbs": [
      "Tutorials",
      "Julia Quick Start"
    ]
  },
  {
    "objectID": "tutorials/install_julia.html#wglmakie-plots",
    "href": "tutorials/install_julia.html#wglmakie-plots",
    "title": "Julia Quick Start",
    "section": "WGLMakie Plots",
    "text": "WGLMakie Plots\nHere is a fancier bit of code to make a 3D plot:\n\nusing WGLMakie\nusing JSServe # JSServe is a dependency of WGLMakie, but explicit import is fine\n\nWGLMakie.activate!()\nx = y = z = 1..10\nx_r = y_r = z_r = 1:10\nf(ix, iy, iz) = ix^2 + iy^2 + iz^2\nvol = [f(ix, iy, iz) for ix in x_r, iy in y_r, iz in z_r]\nfig_contour = Figure(size = (400,400)) # Renamed variable\nax_contour = Axis3(fig_contour[1,1]; perspectiveness = 0.5, azimuth = 2.19,\n    elevation = 0.57, aspect = (1, 1, 1))\ncontour!(ax_contour, x, y, z, vol; levels = 10, colormap = :Egypt, transparency = true)\n\nfig_contour # Return the figure object directly\n\n\n\n\n  \n    \n    \n    \n  \n  \n    \n    \n    \n      \n    \n  \n\n\n\nFigure 1: A Makie Plot",
    "crumbs": [
      "Tutorials",
      "Julia Quick Start"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bezia Lemma",
    "section": "",
    "text": "From multiscale physics to physiology\n  \n\n\n\n\n\n\n\n\nActive microphase separation in mixtures of microtubules and tip-accumulating molecular motors\n2022\n\n\n\n\n\n\n\nSpatial patterning of energy metabolism during tissue morphogenesis\n2023\n\n\n\n\n\n\n\nStructure and dynamics of motor-driven microtubule bundles\n2024"
  }
]